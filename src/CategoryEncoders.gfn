<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="CategoryEncoders" minver="2018a">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.4</version>
<date>2021-04-02</date>
<description>Encoder based on categorical variables</description>
<tags>C10</tags>
<help>
*** CategoryEncoders ***

A set of gretl transformers for encoding categorical variables into numeric
with different techniques. Many econometric techniques and learning algorithms
require categorical data to be transformed into real vectors before it can be
used as input.

The mean, median, pca, low-rank and multinomial logit encoding techniques are
inspired by the paper of Athey et al. (2019) entitled [&quot;Sufficient
Representations for Categorical Variables&quot;] (https://arxiv.org/abs/1908.09874).
Their github project-page can be found [here] (https://github.com/grf-labs/
sufrep). The authors propose lower-dimensional real-values representations of
categorical variables that are sufficient in the sense that no predictive
information is lost.

Source code plus tests can be found here:
https://github.com/atecon/CategoryEncoders

For a more detailed manual, see
&lt;https://github.com/atecon/CategoryEncoders/blob/master/README.md&gt;.

Please report bugs or comments on the gretl mailing list, on github.com or
write to atecon@posteo.de.


----------------
Public Functions
----------------

binary_encode()
===============
Binarize data (set feature values to 0 or 1) according to a threshold. Values
greater than the threshold map to 1, while values less than or equal to the
threshold map to 0. With the default threshold of 0, only positive values map
to 1.

Parameters:
-----------
X:
list, List of series to which to apply the function

threshold:
scalar, Feature values below or equal to this are replaced by 0, above it by 1.
(0.0 by default)

suffix:
string, Add a suffix to the returned series' name (default value &quot;_bin&quot;)

Returns:
--------
List of named series with binary values. Missing (NA) values of the i-th input
series are ignored. The i-th series' name takes the i-th input series' name
plus the suffix &quot;_bin&quot; if not differently set.


ohe_encode()
============
Encode categorical discrete integer features of a single series as a one-hot (
binary) list of series. The encoder derives the categories based on the unique
values of the input series.

Parameters:
-----------
X:
series, Series with discrete values to which to apply the function

drop:
int, Decide whether to drop a resulting series. Per default no resulting series
is dropped. For drop=1, the lowest value of X is omitted from the encoding. For
drop=2 the highest value of X is omitted from the encoding

verbose:
bool, Print details or not (per default no printout)

Returns:
--------
List of named series with binary values. The i-th series is named 'x_ohe_d'
where 'x' refers to the name of input series X[i] and 'd' to the d-th distinct
value of X. If the the input series is not discrete, includes only missing
values (NA) or is a constant, an empty list is returned.


means_encode()
==============
Compute category-wise, as identified by the discrete series G, mean values for
each variable in list X.

Parameters:
-----------
X:
list, List of series to which to apply the function

G:
series, Discrete series referring to unique categories

suffix:
string, Add a suffix to the returned series' name (default value &quot;_mean&quot;)

verbose:
bool, Print details or not (per default no printout)

Returns:
--------
List of named series with category-wise mean values. The i-th series name takes
the i-th input series' name plus the suffix &quot;_mean&quot; if not differently set. If
G is not a discrete series, an empty list is returned. Missing observations of
the i-th series X[i] are interpolated by group-wise mean values.


median_encode()
===============
Compute category-wise, as identified by the discrete series G, median values
for each variable in list X.

Parameters:
-----------
X:
list, List of series to which to apply the function

G:
series, Discrete series referring to unique categories

suffix:
string, Add a suffix to the returned series' name (default value &quot;_mean&quot;)

verbose:
bool, Print details or not (per default no printout)

Returns:
--------
List of named series with category-wise median values. The i-th series name
takes the i-th input series' name plus the suffix &quot;_median&quot; if not differently
set. If G is not a discrete series, an empty list is returned. Missing
observations of the i-th series X[i] are interpolated by group-wise median
values.


pca_encode()
============
Compute category-wise, as identified by the discrete series G, principle
components using all information in list X. Means encoding, by applying the
function mean_encode(), is automatically applied to all members of X, before
computing principal components.

Parameters:
-----------
X:
list, List of series to which to apply the function

G:
series, Discrete series identifying unique categories

num_components:
int, Retrieve only the first n principle components (per default retrieve all).
'num_components' cannot exceed the number of list members of X.

suffix:
string, Add a suffix to the returned series' name (default value &quot;_pca&quot;)

verbose:
bool, Print details or not (per default no printout)

Returns:
--------
List of named series with group-wise principle component values. The i-th
series name takes the i-th input series' name plus the suffix &quot;_pca&quot; if not
differently set. If G is not discrete, list X includes less than two members,
or any series of X is constant or includes inly missing values, an empty list
is returned. If some series X[i] comprises at least some non-missing values,
PCA will probably still work.


low_rank_encode()
=================
Compute category-wise, as identified by the discrete series G, left-singular
value matrix component by means of Singular Value Decomposition using all
information in list X. Means encoding, by applying the function mean_encode(),
is automatically applied to all members of X, before computing principal
components.

Parameters:
-----------
X:
list, List of k series to which to apply the function

G:
series, Discrete series identifying unique groups

num_components:
int, Retrieve only the first n columns of the left-singular value matrix (per
default retrieve the first k columns)

suffix:
string, Add a suffix to the returned series' name (default value &quot;_svd&quot;)

verbose:
bool, Print details or not (per default no printout)

Returns:
--------
List of named series with group-wise rank component values. The i-th series
name takes the i-th input series' name plus the suffix &quot;_svd&quot; if not
differently set. If G is not discrete, list X includes less than two members or
some series X[i] is a constant, an empty list is returned. If some series X[i]
comprises at least some non-missing values, SVD will probably still work.


mnl_encode()
============
Compute category-wise, as identified by the discrete series G, left-singular
value matrix component by means of Singular Value Decomposition using all
information in list X. Means encoding, by applying the function mean_encode(),
is automatically applied to all members of X, before computing principal
components.


Parameters:
-----------
X:
list, List of k series to which to apply the function

G:
series, Discrete series identifying unique groups

num_components:
int, Retrieve only the first n columns of the left-singular value matrix (per
default retrieve the first k columns)

suffix:
string, Add a suffix to the returned series' name (default value &quot;_mnl&quot;)

verbose:
bool, Print details or not (per default no printout)

Returns:
--------
List of named series with category-wise rank component values. The i-th series
name takes the i-th input series' name plus the suffix &quot;_mnl&quot; if not
differently set. If G is not discrete, of G has not at least two distinct
values, list X includes less than two members or some series X[i] is a
constant, an empty list is returned. If some series X[i] comprises at least
some missing values, logit type of estimation fails.


stats_by_group()
================
Compute category-wise, as identified by the discrete series G, some statistics
of of interest supported by gretl's built-in aggregate() function.

Parameters:
-----------
X:
series, Series to which to apply the 'operation'.

G:
series, Discrete series identifying unique groups

operation:
string, Name of the function to apply, e.g. 'mean', 'sd'.

verbose:
bool, Print details or not (optional; default = 0 (FALSE))

Returns:
--------
Single series with group-wise statistics based on 'X'. If for some group not
sufficient observations exist to compute the 'operation', NA is returned for
observations of this specific group.


impose_by_group()
================
Impose group-wise, as identified by the discrete series G, some numerical value
to the returned series. The length of the vector of numerical values to impose,
'V', must equal the distinct values of series 'G'.

Parameters:
-----------
G:
series, Discrete series identifying unique groups

V:
matrix, Vector of numerical values to impose for each of the i-th groups.

Returns:
--------
Single series with group-wise imposed values.


Changelog:
----------
Version 0.4 (March 2021):
- Fix bug with 'const' operator for a list of series in function pca_encode()
- Clean up of internals
- Avoid using &quot;smpl&quot; command by exploiting boolean mask operation instead.
- Make formerly internal functions stats_by_group() and impose_by_group() public

Version 0.31 (Jan. 2020):
- Switch back from tall_svd() to built-in svd() as gretl version 2020b (and as
  already the current git version) will include an optimized version of svd().

Version 0.3 (Jan. 2020):
- Bugfix: For mnl_encode(), no means encoding is applied on list X any more as
  this resulted in perfect collinearity issues.
- Mean encoding is done automatically when calling pca_encode() or
  low_rank_enocde(), and cannot be selected by the user.
- Drop unused 'verbose' argument from binary_encode().
- Add several unit-tests.
- Add additional checks.
- Code cleanup.

Version 0.2 (Sept. 2019):
- Initial version
</help>
<gretl-function name="ohe_encode" type="list">
 <params count="3">
  <param name="X" type="series" const="true">
<description>Discrete series</description>
  </param>
  <param name="drop" type="scalar" min="0" max="2" default="1" const="true">
<description>0=drop none, 1=drop-first, 2=drop-last</description>
  </param>
  <param name="verbose" type="bool" default="0" const="true">
<description>Print details</description>
  </param>
 </params>
<code>/* One-hot encoding aka 'dummification' of categorical variable. */
list R = null
if !series_g_isdiscrete(X) || sum(ok(X)) == 0 || isconst(X)
  return R
endif
matrix X_values = values(X)
string to_be_droppped = &quot;&quot;
to_be_droppped = (drop == 1) ? &quot;--drop-first&quot; : to_be_droppped
to_be_droppped = (drop == 2) ? &quot;--drop-last&quot; : to_be_droppped
dummify X @to_be_droppped
list R += D*
# dependent on drop(1/2), either the 1st or last column of X_values
# must be dropped to ensure right naming in the following
X_values = (drop == 1) ? X_values[-1] : X_values
X_values = (drop == 2) ? X_values[-rows(X_values)] : X_values
# Rename returned list of OHE series
loop foreach i R -q
  string current_name = varnames(R)[i]
  string new_name = sprintf(&quot;%s_ohe_%d&quot;, argname(X), X_values[i])
  rename @current_name @new_name
endloop
if verbose &amp;&amp; drop
  if drop == 1
    string which = &quot;lowest&quot;
  elif drop == 2
    string which = &quot;highest&quot;
  endif
  printf &quot;\nInfo: The %s value of variable %s is omitted \n           from the encoding.\n&quot;, which, argname(X)
endif
return R
</code>
</gretl-function>
<gretl-function name="binary_encode" type="list">
 <params count="3">
  <param name="X" type="list" const="true">
<description>List of series</description>
  </param>
  <param name="threshold" type="scalar" const="true">
<description>X[i] &lt;= threshold are set to 0, above it by 1.</description>
  </param>
  <param name="suffix" type="string" optional="true">
<description>Suffix for returned series name</description>
  </param>
 </params>
<code>/* Binarize data (set feature values to 0 or 1) according to a threshold. */
list R = null
if !exists(suffix)
  string suffix = &quot;_bin&quot;
endif
loop foreach i X -q
  string vname = sprintf(&quot;%s%s&quot;, varname(X.$i), suffix)
  list R += genseries(vname, 0*(X.$i &lt;= threshold) || (X.$i &gt; threshold))
endloop
return R
</code>
</gretl-function>
<gretl-function name="median_encode" type="list">
 <params count="4">
  <param name="X" type="list" const="true">
<description>List of series</description>
  </param>
  <param name="G" type="series" const="true">
<description>Holding group IDs</description>
  </param>
  <param name="suffix" type="string" optional="true">
<description>Suffix for returned series name</description>
  </param>
  <param name="verbose" type="bool" default="0" const="true"/>
 </params>
<code>/* Group-wise median computation wrapper function. */
scalar compute_median = 1
if !exists(suffix)
  string suffix = &quot;median&quot;
endif
return means_or_median_encode(X, G, compute_median, suffix, verbose)
</code>
</gretl-function>
<gretl-function name="means_encode" type="list">
 <params count="4">
  <param name="X" type="list" const="true">
<description>List of series</description>
  </param>
  <param name="G" type="series" const="true">
<description>Holding group IDs</description>
  </param>
  <param name="suffix" type="string" optional="true">
<description>Suffix for returned series name</description>
  </param>
  <param name="verbose" type="bool" default="0" const="true"/>
 </params>
<code>/* Group-wise mean computation wrapper function */
scalar compute_median = 0
if !exists(suffix)
  string suffix = &quot;mean&quot;
endif
return means_or_median_encode(X, G, compute_median, suffix, verbose)
</code>
</gretl-function>
<gretl-function name="pca_encode" type="list">
 <params count="5">
  <param name="X" type="list" const="true">
<description>Exogenous regressors</description>
  </param>
  <param name="G" type="series" const="true">
<description>Holding group IDs</description>
  </param>
  <param name="num_components" type="int" min="0" default="0" const="true">
<description>Retrieve only first n PCs</description>
  </param>
  <param name="suffix" type="string" optional="true">
<description>Suffix for returned series name</description>
  </param>
  <param name="verbose" type="bool" default="0" const="true"/>
 </params>
<code>/* Principal components analysis. mean_encode() will be run automatically. */
list Xmeans = null
list R = null
list PC = null
if !exists(suffix)
  string suffix = &quot;_pca&quot;
elif !strlen(suffix)
  string suffix = &quot;_pca&quot;
endif
string verbose_opt = get_verbose_opt(verbose)
strings xnames = varnames(X)
if !series_g_isdiscrete(G) || !xlist_has_at_least_two_members(X) || !check_num_components(X, num_components) || xlist_member_isconst(X)
  return R
endif
list Xmeans = means_encode(X, G)
if num_components
  string save_opt = sprintf(&quot;--save=%d&quot;, num_components)
else
  string save_opt = &quot;--save-all&quot;			# PCA on group-wise mean values
endif
smpl G Xmeans --no-missing
pca Xmeans @save_opt @verbose_opt
list PC += PC*
scalar counter = 0
loop foreach i Xmeans -q
  list R += genseries(sprintf(&quot;%s%s&quot;, xnames[i], suffix), PC[i])
  counter++
  if num_components &gt; 0
    if counter == num_components
      break
    endif
  endif
endloop
smpl full
return R
</code>
</gretl-function>
<gretl-function name="low_rank_encode" type="list">
 <params count="5">
  <param name="X" type="list">
<description>Exogenous regressors</description>
  </param>
  <param name="G" type="series" const="true">
<description>Holding group IDs</description>
  </param>
  <param name="num_components" type="int" min="0" default="0" const="true">
<description>Retrieve only first n PCs</description>
  </param>
  <param name="suffix" type="string" optional="true">
<description>Suffix for returned series name</description>
  </param>
  <param name="verbose" type="bool" default="0" const="true"/>
 </params>
<code>/* SVD based encoding. mean_encode() will be run automatically */
list R = null
matrix U
matrix V
if !exists(suffix)
  string suffix = &quot;_svd&quot;
elif !strlen(suffix)
  string suffix = &quot;_svd&quot;
endif
strings xnames = varnames(X)
if !series_g_isdiscrete(G) || !xlist_has_at_least_two_members(X) || !check_num_components(X, num_components) || xlist_member_isconst(X)
  return R
endif
list X = means_encode(X, G)
smpl G X --no-missing
matrix sv = svd({X}, &amp;U, &amp;V)
scalar counter = 0
loop foreach i X -q
  list R += genseries(sprintf(&quot;%s%s&quot;, xnames[i], suffix), U[,i])
  counter++
  if num_components &gt; 0
    if counter == num_components
      break
    endif
  endif
endloop
smpl full
return R
</code>
</gretl-function>
<gretl-function name="mnl_encode" type="list">
 <params count="4">
  <param name="X" type="list" const="true">
<description>Exogenous regressors</description>
  </param>
  <param name="G" type="series" const="true">
<description>Dependent variable holding group IDs</description>
  </param>
  <param name="suffix" type="string" optional="true">
<description>Suffix for returned series name</description>
  </param>
  <param name="verbose" type="bool" default="0" const="true"/>
 </params>
<code>/* Multinomial logistic regression. Requires also coefficients from
reference category which are, however, not returned by gretl. */
list R = null
if !exists(suffix)
  string suffix = &quot;_mnl&quot;
elif !strlen(suffix)
  string suffix = &quot;_mnl&quot;
endif
string verbose_opt = get_verbose_opt(verbose)
scalar n_g_values = rows(values(G))
strings xnames = varnames(X)
if n_g_values == 1
  printf &quot;\nError: Dependent group-series %s must at least have two distinct values.&quot;, argname(G)
  return R
endif
if !series_g_isdiscrete(G) || !xlist_has_at_least_two_members(X)
  return R
endif
catch logit G const X --multinomial @verbose_opt
if $error
  printf &quot;\nError: Failed to estimate logit model.\n&quot;
  return R
endif
scalar pos_const = inlist($xlist, &quot;const&quot;)
# Group-wise coefficient i is stored in rows of beta
matrix beta = ones(1, $model.cblock) | mshape($coeff, $model.cblock, $model.multinom)' # rows: unit, cols: coeff
if pos_const &gt; 0
  beta = beta[, -pos_const]			# ISSUE: Shall we drop column of intercepts?
endif
if rows(beta) != rows(values(G))
  funcerr &quot;ERROR: The no. of distinct groups (G) does not equal the no. of rows of matrix 'beta'&quot;
endif
loop i=1..nelem(X) -q			# Note: must be '1+nelem(X)' in case the intercept is considered
  list R += genseries(sprintf(&quot;%s%s&quot;, xnames[i], suffix), impose_by_group(G, beta[,i]))
endloop
return R
</code>
</gretl-function>
<gretl-function name="stats_by_group" type="series">
 <params count="4">
  <param name="X" type="series" const="true">
<description>Target series</description>
  </param>
  <param name="G" type="series" const="true">
<description>Group IDs</description>
  </param>
  <param name="operation" type="string" const="true">
<description>E.g. 'mean', 'sd' etc.</description>
  </param>
  <param name="verbose" type="bool" default="0" const="true"/>
 </params>
<code>/* Function for grouping series X by G, computing group-wise
statistics. Group-wise stats are imposed as values for constructing a series. 'operation' must be supported by the aggregate() function.
Return: Series with statistical value for each group. */
matrix agg = aggregate(X, G, @operation)
matrix groups = values(G)
series R = NA
loop i=1..rows(groups) -q
  series mask = (G == groups[i])
  scalar value = agg[i,3]
  if !ok(value) &amp;&amp; verbose
    printf &quot;\nWarning: Could not compute statistics for group='%g'. Ignore.&quot;, groups[i]
  else
    series R = (mask == 1) ? value : R
  endif
endloop
return R
</code>
</gretl-function>
<gretl-function name="impose_by_group" type="series">
 <params count="2">
  <param name="G" type="series" const="true">
<description>Group IDs</description>
  </param>
  <param name="V" type="matrix">
<description>Numerical values for each group</description>
  </param>
 </params>
<code>/* Impose group-wise values taken from vector V. The i-th entry
in V is mapped onto the i-th group G[i].
Return: Series with imposed values for each group. */
V = vec(V)
matrix groups = values(G)
errorif(nelem(V) != nelem(groups), &quot;Number of groups must equal length of the vector with values to be imposed.&quot;)
series R = NA
loop i=1..rows(groups) -q
  series mask = (G == groups[i])
  series R = (mask == 1) ? V[i] : R
endloop
return R
</code>
</gretl-function>
<gretl-function name="means_or_median_encode" type="list" private="1">
 <params count="5">
  <param name="X" type="list" const="true">
<description>List of series</description>
  </param>
  <param name="G" type="series" const="true">
<description>Holding group IDs</description>
  </param>
  <param name="use_median" type="bool" default="0" const="true">
<description>Median instead of mean encoding</description>
  </param>
  <param name="suffix" type="string" const="true">
<description>Suffix for returned series name</description>
  </param>
  <param name="verbose" type="bool" default="0" const="true">
<description>Print details</description>
  </param>
 </params>
<code>/* Function actually computing means/median_encoder */
list R = null
if !series_g_isdiscrete(G)
  return R
endif
string operation = (use_median) ? &quot;median&quot; : &quot;mean&quot;
loop foreach i X -q
  list R += genseries(sprintf(&quot;%s_%s&quot;, varname(X.$i), suffix), stats_by_group(X.$i, G, operation, verbose))
  if verbose
    printf &quot;\nInfo: Generated group-wise %s series %s_%s.\n&quot;, operation, varname(X.$i), operation
  endif
endloop
return R
</code>
</gretl-function>
<gretl-function name="series_g_isdiscrete" type="scalar" private="1">
 <params count="1">
  <param name="G" type="series" const="true">
<description>Discrete grouping series</description>
  </param>
 </params>
<code>/* Check whether grouping series G is discrete. */
if !isdiscrete(G)
  printf &quot;\nError: Input series %s is not discrete. Check gretl's setinfo' command.\n&quot;, argname(G)
  return 0
endif
return 1
</code>
</gretl-function>
<gretl-function name="check_num_components" type="scalar" private="1">
 <params count="2">
  <param name="X" type="list" const="true"/>
  <param name="num_components" type="int" min="0" const="true"/>
 </params>
<code>/* Check that the number of components supposed to store does not
exceed the number of list members.
Return: 0 (FALSE) in case of an error, otherwise 1 (TRUE). */
if num_components &gt; nelem(X)
  printf &quot;\nError: Argument num_components cannot be larger than length of list X.&quot;
  return 0
endif
return 1
</code>
</gretl-function>
<gretl-function name="xlist_has_at_least_two_members" type="scalar" private="1">
 <params count="1">
  <param name="X" type="list" const="true"/>
 </params>
<code>/* Helper function checking number of elements in X.
Return: 0 (FALSE) in case of an error, otherwise 1 (TRUE).*/
if nelem(X) &lt; 2
  printf &quot;\nError: At least 2 series must be in list X.\n&quot;
  return 0
endif
return 1
</code>
</gretl-function>
<gretl-function name="get_verbose_opt" type="string" private="1">
 <params count="1">
  <param name="verbose" type="bool" const="true"/>
 </params>
<code>string verbose_opt = &quot;&quot;
return (verbose == 0) ? &quot;--quiet&quot; : verbose_opt
</code>
</gretl-function>
<gretl-function name="xlist_member_isconst" type="scalar" private="1">
 <params count="1">
  <param name="X" type="list" const="true"/>
 </params>
<code>/* Checks of any series of X is a constant.
return: TRUE is any series is constant, otherwise FALSE. */
loop foreach i X -q
  if isconst(X.$i)
    return 1
    printf &quot;\nError: pca_encode() does not work if any regressor is constant.\n&quot;
    break
  endif
endloop
return 0
</code>
</gretl-function>
<sample-script>
clear
set verbose off

include &quot;CategoryEncoders.gfn&quot; --force

open nc_crime.gdt -q --preserve

# Illustrative discrete 'grouping' variable
series unit = urban
setinfo unit --discrete

# List of regressors
list Xbase = density wcon


# One-hot encoding (aka dummifying)
list OHE = ohe_encode(unit, 0, 1)
print unit OHE -o --range=70:80

# Binarizer
list BIN = binary_encode(Xbase, 1.1)
print Xbase BIN -o --range=70:80

# Mean encoding
list Xpmean = means_encode(Xbase, unit, &quot;some_suffix&quot;)
print unit Xbase Xpmean -o --range=70:80

# Median encoding
list Xpmedian = median_encode(Xbase, unit)
print unit Xbase Xpmedian -o --range=70:80

# PCA encoding
list Xpca = pca_encode(Xbase, unit)
print unit Xbase Xpca -o --range=70:80

# SVD (low rank) encoding but return only first 2 components
list Xsvd = low_rank_encode(Xbase, unit, 2)
print unit Xbase Xsvd -o --range=70:80

# Multinomial logistic regression coefficients (excluding intercept which is used for estimation)
list Xmnl = mnl_encode(Xbase, unit, , 1)
print unit Xbase Xmnl -o --range=70:80
</sample-script>
</gretl-function-package>
</gretl-functions>
