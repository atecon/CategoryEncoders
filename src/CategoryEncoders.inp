function list ohe_encode (const series X "Discrete series",
                          const scalar drop[0:2:1] "0=drop none, 1=drop-first, 2=drop-last",
                          const bool verbose[0] "Print details")
    /* One-hot encoding aka 'dummification' of categorical variable. */

    list R = null
    if !series_g_isdiscrete(X) || sum(ok(X)) == 0 || isconst(X)
        return R
    endif
    matrix X_values = values(X)

    string to_be_droppped = ""
    to_be_droppped = (drop == 1) ? "--drop-first" : to_be_droppped
    to_be_droppped = (drop == 2) ? "--drop-last" : to_be_droppped

    dummify X @to_be_droppped
    list R += D*

    # dependent on drop(1/2), either the 1st or last column of X_values
    # must be droppped to ensure right naming in the following
    X_values = (drop == 1) ? X_values[-1] : X_values
    X_values = (drop == 2) ? X_values[-rows(X_values)] : X_values

    # Rename returned list of OHE series
    loop foreach i R -q
        string current_name = varnames(R)[i]
        string new_name = sprintf("%s_ohe_%d", argname(X), X_values[i])
        rename @current_name @new_name
    endloop

    if verbose && drop
        if drop == 1
            string which = "highest"
        elif drop == 2
            string which = "lowest"
        endif
        printf "\nInfo: The %s value of variable %s is omitted \n\
          from the encoding.\n", which, argname(X)
    endif

    return R
end function


function list binary_encode (const list X "List of series",
                             const scalar threshold "X[i] <= threshold are set to 0, above it by 1.",
                             string suffix[null] "Suffix for returned series name",
                             const bool verbose[0] "Print details")
    /* Binarize data (set feature values to 0 or 1) according to a threshold. */

    list R = null

    if !exists(suffix)
        string suffix = "_bin"
    endif

    loop foreach i X -q
        string vname = sprintf("%s%s", varname(X.$i), suffix)
        list R += genseries(vname, 0*(X.$i <= threshold) || (X.$i > threshold))
    endloop

    return R
end function


function list means_or_median_encode (const list X "List of series",
                                      const series G "Holding group IDs",
                                      const bool use_median[0] "Median instead of mean encoding",
                                      const string suffix "Suffix for returned series name",
                                      const bool verbose[0] "Print details")
    /* Function actually computing means/median_encoder */

    list R = null

    if !series_g_isdiscrete(G)
        return R
    endif

    string operation = "mean"
    operation = (use_median) ? "median" : operation

    loop foreach i X -q
        list R += genseries(sprintf("%s_%s", varname(X.$i), suffix), \
          series_with_groupwise_stats(X.$i, G, operation, verbose))

        if verbose
            printf "\nInfo: Generated group-wise %s series %s_%s.\n", \
              operation, varname(X.$i), operation
        endif
    endloop

    return R
end function


function list median_encode (const list X "List of series",
                             const series G "Holding group IDs",
                             string suffix[null] "Suffix for returned series name",
                             const bool verbose[0])
    /* Group-wise median computation wrapper function */

    if !exists(suffix)
        string suffix = "median"
    endif

    return means_or_median_encode(X, G, 1, suffix, verbose)
end function


function list means_encode (const list X "List of series",
                            const series G "Holding group IDs",
                            string suffix[null] "Suffix for returned series name",
                            const bool verbose[0])
    /* Group-wise mean computation wrapper function */

    if !exists(suffix)
        string suffix = "mean"
    endif

    return means_or_median_encode(X, G, 0, suffix, verbose)
end function


function series series_with_groupwise_stats (const series X "Exogenous regressors",
                                             const series G "Holding group IDs",
                                             const string operation "E.g. 'mean', 'sd' etc.",
                                             const bool verbose[0])
    /* Helper function for grouping series X by G, computing group-wise
       statistics. Group-wise stats are imposed as values for constructing
    a series */

    matrix agg = aggregate(X, G, @operation)
    matrix groups = values(G)
    series R = NA

    loop i=1..rows(groups) -q
        catch smpl G == groups[i] --restrict --replace --quiet
        if $error
            if verbose
                printf "\nWarning: No observation exists for group G=%d\n", groups[i]
            endif
            return R
        endif
        series R = agg[i,3]
    endloop
    smpl full

    return R
end function


function series series_with_groupwise_values (const series G,
                                              const matrix V "Column vector of G scalar values",
                                              const bool verbose[0])
    /* Helper function imposing group-wise values taken from vector V. The i-th entry
    in V is mapped onto the i-th group G[i]. */

    matrix groups = values(G)
    series R = NA

    loop i=1..rows(groups) -q
        catch smpl G == groups[i] --restrict --replace --quiet

        if $error
            if verbose
                printf "\nWarning: No observation exists for group G=%d\n", groups[i]
            endif
            return R
        endif

        series R = V[i]
        smpl full			# For some reason --replace option does not work
    endloop

    return R
end function

function scalar xlist_member_isconst (const list X)
    /* Checks of any series of X is a constant. */
    
    scalar ret = 0
    loop foreach i X -q
        if isconst(X.$i)
            ret++
            printf "\nError: pca_encode() does not work if any regressor is constant."
            break
        endif
    endloop
    
    return ret    
end function

function list pca_encode (const list X "Exogenous regressors",
                          const series G "Holding group IDs",
                          const int num_components[0::0] "Retrieve only first n PCs",
                          string suffix[null] "Suffix for returned series name",
                          const bool verbose[0])
    /* Principal components anaylsis. mean_encode() will be run automatically. */

    list R = null
    list PC = null
    if !exists(suffix) || !strlen(suffix)
        string suffix = "_pca"
    endif
    string verbose_opt = get_verbose_opt(verbose)
    strings xnames = varnames(X)

    if !series_g_isdiscrete(G) || !xlist_has_at_least_two_members(X) || \
          !check_num_components(X, num_components) || xlist_member_isconst(X)
        return R
    endif

    list X = means_encode(X, G)

    if num_components
        string save_opt = sprintf("--save=%d", num_components)
    else
        string save_opt = "--save-all"			# PCA on group-wise mean values
    endif

    smpl G X --no-missing

    pca X @save_opt @verbose_opt
    list PC += PC*
    print PC -o

    scalar counter = 0
    loop foreach i X -q
        list R += genseries(sprintf("%s%s", xnames[i], suffix), PC[i])
        counter++
        if num_components > 0
            if counter == num_components
                break
            endif
        endif
    endloop

    smpl full

    return R
end function


function list low_rank_encode (list X "Exogenous regressors",
                               const series G "Holding group IDs",
                               const int num_components[0::0] "Retrieve only first n PCs",
                               string suffix[null] "Suffix for returned series name",
                               const bool verbose[0])
    /* SVD based encoding. mean_encode() will be run automatically */

    list R = null
    matrix U
    matrix V
    if !exists(suffix) || !strlen(suffix)
        string suffix = "_svd"
    endif
    strings xnames = varnames(X)

    if !series_g_isdiscrete(G) || !xlist_has_at_least_two_members(X) || !check_num_components(X, num_components) \
        || xlist_member_isconst(X)
        return R
    endif

    list X = means_encode(X, G)

    smpl G X --no-missing

    #matrix sv = svd({X}, &U, &V)				# slower than tall_svd()
    matrix sv = tall_svd({X}, &U, &V)

    scalar counter = 0
    loop foreach i X -q
        list R += genseries(sprintf("%s%s", xnames[i], suffix), U[,i])
        counter++
        if num_components > 0
            if counter == num_components
                break
            endif
        endif
    endloop

    smpl full

    return R
end function


function list mnl_encode (const list X "Exogenous regressors",
                          const series G "Dependent variable holding group IDs",
                          string suffix[null] "Suffix for returned series name",
                          const bool verbose[0])
    /* Multinomial logistic regression. Requires also coefficients from
    reference category which are, however, not returned by gretl. */

    list R = null
    if !exists(suffix) || !strlen(suffix)
        string suffix = "_mnl"
    endif
    string verbose_opt = get_verbose_opt(verbose)
    scalar n_g_values = rows(values(G))
    strings xnames = varnames(X)

    if n_g_values == 1
        printf "\nError: Group-series %s must at least comprise two distinct values.", \
          argname(G)
    endif
    if !series_g_isdiscrete(G) || !xlist_has_at_least_two_members(X)
        return R
    endif

    catch logit G const X --multinomial @verbose_opt
    if $error
        printf "\nError: Failed to estimate logit model."
        return R
    endif

    scalar pos_const = inlist($xlist, "const")

    # Group-wise coefficient i is stored in rows of beta
    matrix beta = ones(1, $model.cblock) | \
      mshape($coeff, $model.cblock, $model.multinom)'	# rows: unit, cols: coeff
    if pos_const > 0
        beta = beta[, -pos_const]			# ISSUE: Shall we drop column of intercepts?
    endif

    if rows(beta) != rows(values(G))
        funcerr "ERROR: The no. of distinct groups (G) does not equal the no. of rows of matrix 'beta'"
    endif

    loop i=1..nelem(X) -q			# Note: must be '1+nelem(X)' in case the intercept is considered
        list R += genseries(sprintf("%s%s", xnames[i], suffix), \
          series_with_groupwise_values(G, beta[,i]))
    endloop

    return R
end function


function matrix tall_svd (const matrix X, matrix *U, matrix *V)
/* Special-case svd when X has lots of rows and few columns. Faster than built-in svd().
    Written by Jack Lucchetti. */

    scalar c = cols(X)
    matrix lambdas = eigensym(X'X, &V)
    lambdas = mreverse(sqrt(lambdas))'
    V = V[,seq(c,1)]
    U = X*(V./lambdas)

    return lambdas
end function


function scalar series_g_isdiscrete (const series G "Discrete grouping series")
    /* Check whether grouping series G is discrete. */

    if !isdiscrete(G)
        printf "\nError: Input series %s is not discrete. Check the 'setinfo' command.\n", \
          argname(G)
        return 0
    endif
    return 1
end function

function scalar check_num_components (const list X,
                                      const int num_components[0::])
    /* Helper function checking that number compoents supposed to store
    does not exceed list members. */

    if num_components > nelem(X)
        printf "\nError: Argument num_components cannot be larger than length of list X."
        return 0
    endif
    return 1
end function

function scalar xlist_has_at_least_two_members (const list X)
    /* Helper function checking number of elements in X */
    if nelem(X) < 2
        printf "\nError: At least 2 series must be in list X.\n"
        return 0
    endif
    return 1
end function

function string get_verbose_opt (const bool verbose)
    string verbose_opt = ""
    return (verbose==0) ? "--quiet" : verbose_opt
end function



